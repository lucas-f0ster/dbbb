{"version":3,"sources":["webpack://boilerplate-fullstack/./node_modules/@ion-phaser/core/dist/esm/ion-phaser.entry.js"],"names":["IonPhaser","hostRef","r","this","initialize","initializeGame","game","undefined","instance","Error","parent","el","Phaser","Game","hasInitialized","newInitialize","oldInitialize","Promise","resolve","destroy","g","style"],"mappings":"yKAEA,MAEMA,EAAY,MAChB,YAAYC,IACV,IAAAC,GAAiBC,KAAMF,GAIvBE,KAAKC,YAAa,EAClBD,KAAKE,eAAiB,CAACC,EAAOH,KAAKG,QACjC,GAAIA,QAAJ,CAEA,QAAsBC,IAAlBD,EAAKE,UAA4C,OAAlBF,EAAKE,SACtC,MAAM,IAAIC,MAAM,+BAElBH,EAAKI,OAASJ,EAAKI,QAAUP,KAAKQ,GAClCL,EAAKE,SAAW,IAAII,OAAOC,KAAKP,KAGpC,aAAaA,GACPH,KAAKC,aAAeD,KAAKW,kBAC3BX,KAAKE,eAAeC,GAGxB,aAAaS,EAAeC,GACtBD,IAAkBC,GACpBb,KAAKE,iBAMT,oBACE,MAAM,SAAEG,GAAaL,KAAKG,MAAQ,GAClC,OAAOW,QAAQC,QAAQV,GAKzB,gBACML,KAAKW,mBACPX,KAAKG,KAAKE,SAASW,SAAQ,GAC3BhB,KAAKG,KAAKE,SAAW,MAGzB,qBACOL,KAAKW,kBAAoBX,KAAKC,YACjCD,KAAKE,iBAGT,uBACEF,KAAKgB,UAEP,iBACE,OAAQhB,KAAKG,WACYC,IAAvBJ,KAAKG,KAAKE,UACa,OAAvBL,KAAKG,KAAKE,SAEd,SAAW,OAAO,IAAAY,GAAWjB,MAC7B,sBAAwB,MAAO,CAC7B,KAAQ,CAAC,gBACT,WAAc,CAAC,mBAGnBH,EAAUqB,MAhEW","file":"459.bundle.js","sourcesContent":["import { r as registerInstance, g as getElement } from './index-53dab568.js';\n\nconst ionPhaserCss = \"ion-phaser{display:block}\";\n\nconst IonPhaser = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * Initialize the phaser game manually\n     */\n    this.initialize = true;\n    this.initializeGame = (game = this.game) => {\n      if (game === null || game === undefined)\n        return;\n      if (game.instance !== undefined && game.instance !== null) {\n        throw new Error(\"A Phaser game already exist\");\n      }\n      game.parent = game.parent || this.el;\n      game.instance = new Phaser.Game(game);\n    };\n  }\n  onGameChange(game) {\n    if (this.initialize && !this.hasInitialized()) {\n      this.initializeGame(game);\n    }\n  }\n  onInitialize(newInitialize, oldInitialize) {\n    if (newInitialize && !oldInitialize) {\n      this.initializeGame();\n    }\n  }\n  /**\n   * Get the Phaser game instance\n   */\n  async getInstance() {\n    const { instance } = this.game || {};\n    return Promise.resolve(instance);\n  }\n  /**\n   * Destroy the Phaser game instance\n   */\n  async destroy() {\n    if (this.hasInitialized()) {\n      this.game.instance.destroy(true);\n      this.game.instance = null;\n    }\n  }\n  connectedCallback() {\n    if (!this.hasInitialized() && this.initialize) {\n      this.initializeGame();\n    }\n  }\n  disconnectedCallback() {\n    this.destroy();\n  }\n  hasInitialized() {\n    return (this.game &&\n      this.game.instance !== undefined &&\n      this.game.instance !== null);\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"game\": [\"onGameChange\"],\n    \"initialize\": [\"onInitialize\"]\n  }; }\n};\nIonPhaser.style = ionPhaserCss;\n\nexport { IonPhaser as ion_phaser };\n"],"sourceRoot":""}