{"version":3,"sources":["webpack://boilerplate-fullstack/./node_modules/@ion-phaser/core/dist/esm/ion-phaser.entry.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAA6E;;AAE7E,iCAAiC,cAAc;;AAE/C;AACA;AACA,IAAI,qDAAgB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,QAAQ,qDAAU,OAAO;AACrC,yBAAyB;AACzB;AACA;AACA,IAAI;AACJ;AACA;;AAEmC","file":"node_modules_ion-phaser_core_dist_esm_ion-phaser_entry_js.bundle.js","sourcesContent":["import { r as registerInstance, g as getElement } from './index-53dab568.js';\n\nconst ionPhaserCss = \"ion-phaser{display:block}\";\n\nconst IonPhaser = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * Initialize the phaser game manually\n     */\n    this.initialize = true;\n    this.initializeGame = (game = this.game) => {\n      if (game === null || game === undefined)\n        return;\n      if (game.instance !== undefined && game.instance !== null) {\n        throw new Error(\"A Phaser game already exist\");\n      }\n      game.parent = game.parent || this.el;\n      game.instance = new Phaser.Game(game);\n    };\n  }\n  onGameChange(game) {\n    if (this.initialize && !this.hasInitialized()) {\n      this.initializeGame(game);\n    }\n  }\n  onInitialize(newInitialize, oldInitialize) {\n    if (newInitialize && !oldInitialize) {\n      this.initializeGame();\n    }\n  }\n  /**\n   * Get the Phaser game instance\n   */\n  async getInstance() {\n    const { instance } = this.game || {};\n    return Promise.resolve(instance);\n  }\n  /**\n   * Destroy the Phaser game instance\n   */\n  async destroy() {\n    if (this.hasInitialized()) {\n      this.game.instance.destroy(true);\n      this.game.instance = null;\n    }\n  }\n  connectedCallback() {\n    if (!this.hasInitialized() && this.initialize) {\n      this.initializeGame();\n    }\n  }\n  disconnectedCallback() {\n    this.destroy();\n  }\n  hasInitialized() {\n    return (this.game &&\n      this.game.instance !== undefined &&\n      this.game.instance !== null);\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"game\": [\"onGameChange\"],\n    \"initialize\": [\"onInitialize\"]\n  }; }\n};\nIonPhaser.style = ionPhaserCss;\n\nexport { IonPhaser as ion_phaser };\n"],"sourceRoot":""}